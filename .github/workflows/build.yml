name: build obs plugin

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  PLUGIN_NAME: move-transition
  OBS_VERSION: 27.0.0

jobs:
  macos64:
    name: "macOS 64-bit"
    runs-on: [macos-latest]
    env:
      QT_VERSION: '5.15.2'
      MACOS_DEPS_VERSION: '2021-02-28'
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
        with:
          repository: obsproject/obs-studio
          ref: ${{ env.OBS_VERSION }}
          submodules: 'recursive'
      - name: "Checkout plugin"
        uses: actions/checkout@v2.3.3
        with:
          path: plugins/${{ env.PLUGIN_NAME }}
      - name: Fetch Git Tags
        run: |
          cd plugins/${{ env.PLUGIN_NAME }}
          git fetch --prune --tags --unshallow
      - name: 'Install prerequisites (Homebrew)'
        shell: bash
        run: |
          if [ -d /usr/local/opt/openssl@1.0.2t ]; then
              brew uninstall openssl@1.0.2t
              brew untap local/openssl
          fi

          if [ -d /usr/local/opt/python@2.7.17 ]; then
              brew uninstall python@2.7.17
              brew untap local/python2
          fi
          brew bundle --file ./CI/scripts/macos/Brewfile
      - name: 'Install prerequisite: Pre-built dependencies'
        if: steps.deps-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L -O https://github.com/obsproject/obs-deps/releases/download/${{ env.MACOS_DEPS_VERSION }}/macos-deps-${{ env.MACOS_DEPS_VERSION }}.tar.gz
          tar -xf ./macos-deps-${{ env.MACOS_DEPS_VERSION }}.tar.gz -C "/tmp"
      - name: 'Install prerequisite: Pre-built dependency Qt'
        if: steps.deps-qt-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L -O https://github.com/obsproject/obs-deps/releases/download/${{ env.MACOS_DEPS_VERSION }}/macos-qt-${{ env.QT_VERSION }}-${{ env.MACOS_DEPS_VERSION }}.tar.gz
          tar -xf ./macos-qt-${{ env.QT_VERSION }}-${{ env.MACOS_DEPS_VERSION }}.tar.gz -C "/tmp"
          xattr -r -d com.apple.quarantine /tmp/obsdeps
      - name: Configure
        shell: bash
        run: |
          echo "add_subdirectory(${{ env.PLUGIN_NAME }})" >> plugins/CMakeLists.txt
          mkdir ./build
          cd ./build
          cmake -DDISABLE_PYTHON=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 -DQTDIR="/tmp/obsdeps" -DSWIGDIR="/tmp/obsdeps" -DDepsPath="/tmp/obsdeps" -DBUILD_BROWSER=OFF -DENABLE_PIPEWIRE=OFF -DBUILD_VST=OFF -DBUILD_VIRTUALCAM=OFF -DENABLE_SCRIPTING=OFF ..
          cd -
      - name: Build
        shell: bash
        run: |
          set -e
          cd ./build
          make -j4
          cd -
      - name: 'Install prerequisite: Packages app'
        if: success()
        shell: bash
        run: |
          curl -L -O http://s.sudre.free.fr/Software/files/Packages.dmg
          sudo hdiutil attach ./Packages.dmg
          sudo installer -pkg /Volumes/Packages\ 1.2.9/Install\ Packages.pkg -target /
      - name: Package
        if: success()
        shell: bash
        run: |
          cd plugins/${{ env.PLUGIN_NAME }}
          FILE_DATE=$(date +%Y-%m-%d)
          FILE_NAME=${{ env.PLUGIN_NAME }}-$FILE_DATE-${{ github.sha }}-macos.pkg
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV
          packagesbuild ./CI/macos/${{ env.PLUGIN_NAME }}.pkgproj
          cd -
          mkdir ./nightly
          mv plugins/${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.pkg ./nightly/${FILE_NAME}
      - name: Publish
        if: success()
        uses: actions/upload-artifact@v2.2.0
        with:
          name: '${{ env.FILE_NAME }}'
          path: ./nightly/*.pkg
  ubuntu64:
    name: 'Linux/Ubuntu 64-bit'
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
        with:
          repository: obsproject/obs-studio
          ref: ${{ env.OBS_VERSION }}
          submodules: 'recursive'
      - name: "Checkout plugin"
        uses: actions/checkout@v2.3.3
        with:
          path: plugins/${{ env.PLUGIN_NAME }}
      - name: Add plugin to obs cmake
        shell: bash
        run: echo "add_subdirectory(${{ env.PLUGIN_NAME }})" >> plugins/CMakeLists.txt
      - name: Fetch Git Tags
        run: git fetch --prune --tags --unshallow
      - name: Install prerequisites (Apt)
        shell: bash
        run: |
          sudo dpkg --add-architecture amd64
          sudo apt-get -qq update
          sudo apt-get install -y \
           build-essential \
           checkinstall \
           cmake \
           libasound2-dev \
           libavcodec-dev \
           libavdevice-dev \
           libavfilter-dev \
           libavformat-dev \
           libavutil-dev \
           libcurl4-openssl-dev \
           libfdk-aac-dev \
           libfontconfig-dev \
           libfreetype6-dev \
           libgl1-mesa-dev \
           libjack-jackd2-dev \
           libjansson-dev \
           libluajit-5.1-dev \
           libpulse-dev \
           libqt5x11extras5-dev \
           libsndio-dev \
           libspeexdsp-dev \
           libswresample-dev \
           libswscale-dev \
           libudev-dev \
           libv4l-dev \
           libva-dev \
           libvlc-dev \
           libx11-dev \
           libx11-xcb-dev \
           libx264-dev \
           libxcb-randr0-dev \
           libxcb-shm0-dev \
           libxcb-xfixes0-dev \
           libxcb-xinerama0-dev \
           libxcomposite-dev \
           libxinerama-dev \
           libmbedtls-dev \
           pkg-config \
           python3-dev \
           qtbase5-dev \
           qtbase5-private-dev \
           libqt5svg5-dev \
           swig \
           linux-generic
      - name: 'Configure'
        shell: bash
        run: |
          mkdir ./build
          cd ./build
          cmake -DUNIX_STRUCTURE=0 -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/obs-studio-portable" -DBUILD_CAPTIONS=OFF -DWITH_RTMPS=OFF -DBUILD_BROWSER=OFF -DBUILD_VIRTUALCAM=OFF -DBUILD_VST=OFF -DENABLE_PIPEWIRE=OFF -DENABLE_SCRIPTING=OFF ..
      - name: 'Build'
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: make -j4
      - name: 'Package'
        shell: bash
        run: |
          FILE_DATE=$(date +%Y-%m-%d)
          FILE_NAME=${{ env.PLUGIN_NAME }}-$FILE_DATE-${{ github.sha }}-linux64.tar.gz
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV
          mkdir -p ./${{ env.PLUGIN_NAME }}/bin/64bit/
          mv ./build/plugins/${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.so ./${{ env.PLUGIN_NAME }}/bin/64bit/${{ env.PLUGIN_NAME }}.so
          mv ./plugins/${{ env.PLUGIN_NAME }}/data ./${{ env.PLUGIN_NAME }}/data
          tar -cvzf "${FILE_NAME}" ${{ env.PLUGIN_NAME }}
      - name: 'Publish'
        uses: actions/upload-artifact@v2.2.0
        with:
          name: '${{ env.FILE_NAME }}'
          path: '*.tar.gz'
  windows:
    name: Windows
    runs-on: [windows-latest]
    env:
      QT_VERSION: '5.15.2'
      CMAKE_GENERATOR: "Visual Studio 16 2019"
      CMAKE_SYSTEM_VERSION: "10.0.18363.657"
      WINDOWS_DEPS_VERSION: '2019'
    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Checkout obs
        uses: actions/checkout@v2.3.3
        with:
          repository: obsproject/obs-studio
          ref: ${{ env.OBS_VERSION }}
          submodules: 'recursive'
      - name: Checkout plugin
        uses: actions/checkout@v2.3.3
        with:
          path: plugins/${{ env.PLUGIN_NAME}}
      - name: Add plugin to obs cmake
        shell: cmd
        run: echo add_subdirectory(${{ env.PLUGIN_NAME }}) >> plugins/CMakeLists.txt
      - name: Fetch Git Tags
        run: git fetch --prune --tags --unshallow
      - name: 'Restore QT dependency from cache'
        id: qt-cache
        uses: actions/cache@v2.1.2
        env:
          CACHE_NAME: 'qt-cache'
        with:
          path: ${{ github.workspace }}/cmbuild/QT
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.QT_VERSION }}
      - name: 'Restore pre-built dependencies from cache'
        id: deps-cache
        uses: actions/cache@v2.1.2
        env:
          CACHE_NAME: 'deps-cache'
        with:
          path: ${{ github.workspace }}/cmbuild/deps
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.WINDOWS_DEPS_VERSION }}
      - name: 'Install prerequisite: QT'
        if: steps.qt-cache.outputs.cache-hit != 'true'
        run: |
          curl -kLO https://cdn-fastly.obsproject.com/downloads/Qt_${{ env.QT_VERSION }}.7z -f --retry 5 -C -
          7z x Qt_${{ env.QT_VERSION }}.7z -o"${{ github.workspace }}/cmbuild/QT"
      - name: 'Install prerequisite: Pre-built dependencies'
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: |
          curl -kLO https://cdn-fastly.obsproject.com/downloads/dependencies${{ env.WINDOWS_DEPS_VERSION }}.zip -f --retry 5 -C -
          7z x dependencies${{ env.WINDOWS_DEPS_VERSION }}.zip -o"${{ github.workspace }}/cmbuild/deps"
      - name: Configure
        run: |
          mkdir ./package
          mkdir ./build32
          cd ./build32
          cmake -G"${{ env.CMAKE_GENERATOR }}" -A"Win32" -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DBUILD_BROWSER=false -DBUILD_VST=false -DBUILD_VIRTUALCAM=false -DBUILD_CAPTIONS=false -DCOMPILE_D3D12_HOOK=false -DENABLE_SCRIPTING=false -DDepsPath="${{ github.workspace }}/cmbuild/deps/win32" -DQTDIR="${{ github.workspace }}/cmbuild/QT/${{ env.QT_VERSION }}/msvc2019" -DCOPIED_DEPENDENCIES=FALSE -DCOPY_DEPENDENCIES=TRUE ..
          cd ..
          mkdir ./build64
          cd ./build64
          cmake -G"${{ env.CMAKE_GENERATOR }}" -A"x64" -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DBUILD_BROWSER=false -DBUILD_VST=false -DBUILD_VIRTUALCAM=false -DBUILD_CAPTIONS=false -DCOMPILE_D3D12_HOOK=false -DENABLE_SCRIPTING=false -DDepsPath="${{ github.workspace }}/cmbuild/deps/win64" -DQTDIR="${{ github.workspace }}/cmbuild/QT/${{ env.QT_VERSION }}/msvc2019_64" -DCOPIED_DEPENDENCIES=FALSE -DCOPY_DEPENDENCIES=TRUE ..
      - name: 'Build 32'
        run: msbuild /m /p:Configuration=RelWithDebInfo .\build32\obs-studio.sln
      - name: 'Build 64'
        run: msbuild /m /p:Configuration=RelWithDebInfo .\build64\obs-studio.sln
      - name: Package
        if: success()
        run: |
          $env:FILE_DATE=(Get-Date -UFormat "%F")
          $env:FILE_NAME="${{ env.PLUGIN_NAME }}-${env:FILE_DATE}-${{ github.sha }}-windows"
          echo "FILE_NAME=${env:FILE_NAME}" >> ${env:GITHUB_ENV}
          robocopy .\build32\rundir\RelWithDebInfo\obs-plugins\32bit\ .\package\obs-plugins\32bit ${{ env.PLUGIN_NAME }}.* /E /XF .gitignore
          robocopy .\build64\rundir\RelWithDebInfo\obs-plugins\64bit\ .\package\obs-plugins\64bit ${{ env.PLUGIN_NAME }}.* /E /XF .gitignore
          robocopy .\build64\rundir\RelWithDebInfo\data\obs-plugins\${{ env.PLUGIN_NAME }}\ .\package\data\obs-plugins\${{ env.PLUGIN_NAME }}\ /E /XF .gitignore
          exit 0
      - name: Publish zip
        if: success()
        uses: actions/upload-artifact@v2.2.0
        with:
          name: '${{ env.FILE_NAME }}'
          path: package/*
      - name: "Package Installer (Prereqs)"
        run: |
          curl "-kL" "https://github.com/Xaymar/msvc-redist-helper/releases/download/0.1/msvc-redist-helper-64.exe" "-f" "--retry" "5" "-o" "msvc-redist-helper.exe"
          curl "-kL" "https://files.jrsoftware.org/is/6/innosetup-6.0.3.exe" "-f" "--retry" "5" "-o" "inno.exe"
          .\inno.exe /VERYSILENT /SP- /SUPPRESSMSGBOXES /NORESTART
      - name: "Package Installer (Compile)"
        run: |
          & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' /Qp ".\build64\plugins\${{ env.PLUGIN_NAME }}\installer.iss"
      - name: Publish installer
        if: success()
        uses: actions/upload-artifact@v2.2.0
        with:
          name: '${{ env.FILE_NAME }}-installer'
          path: package/*.exe
